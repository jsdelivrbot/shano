<?php

namespace Drupal\fs_payment\Plugin\Field\FieldWidget;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\forms_suite\Plugin\Field\FieldWidget\FormsSuiteWidget;

/**
 * Plugin implementation of the 'wovi_donation_period_widget' widget.
 *
 * @FieldWidget(
 *   id = "wovi_donation_period_widget",
 *   multiple_values = TRUE,
 *   label = @Translation("Forms suite donation period widget"),
 *   field_types = {
 *     "wovi_donation_period_field"
 *   }
 * )
 */
class WoViDonationPeriodWidget extends FormsSuiteWidget
{

  /**
   * {@inheritdoc}
   */
  public function formElement(FieldItemListInterface $items, $delta, array $element, array &$form, FormStateInterface $form_state)
  {
    $element = parent::formElement($items, $delta, $element, $form, $form_state);

    $forms_suite_configs = $this->getFieldSetting('forms_suite_configs');
    if (!empty($forms_suite_configs['period_method'])) {
      if (
        (!$forms_suite_configs['period_method']['single_period'] &&
          !$forms_suite_configs['period_method']['interval_period']) ||
        (!!$forms_suite_configs['period_method']['single_period'] &&
          !!$forms_suite_configs['period_method']['interval_period'])
      ) {
        $element['billingPeriod'] = [
          '#type' => 'radios',
          '#title' => t('Billing period'),
          '#options' => [
            7 => t('one time'),
            2 => t('every month'),
          ],
          '#required' => TRUE,
          '#element_validate' => [[get_class($this), 'validateElement']],
          '#default_value' => 7,
        ];
      } else {
        $value = 7;
        if (!$forms_suite_configs['period_method']['single_period']) {
          $value = 2;
        }
        $element['billingPeriod'] = [
          '#type' => 'hidden',
          '#title' => t('Billing period'),
          '#value' => $value,
        ];
      }
    }

    return $element;
  }

  public function form(FieldItemListInterface $items, array &$form, FormStateInterface $form_state, $get_delta = NULL)
  {
    $form_parent = parent::form($items, $form, $form_state, $get_delta); // TODO: Change the autogenerated stub

    $forms_suite_configs = $this->getFieldSetting('forms_suite_configs');
    if (!empty($forms_suite_configs['period_method'])) {
      if (
        (!$forms_suite_configs['period_method']['single_period'] &&
          !!$forms_suite_configs['period_method']['interval_period']) ||
        (!!$forms_suite_configs['period_method']['single_period'] &&
          !$forms_suite_configs['period_method']['interval_period'])
      ) {

        //  Add class to hide hidden-fields
        $form_parent['#attributes']['class'][] = 'field--type-hidden';
      }
    }
    return $form_parent;
  }

  /**
   * {@inheritdoc}
   */
  public static function validateElement(array $element, FormStateInterface &$form_state)
  {
    // validate your fields.
    parent::validateElement($element, $form_state);
  }

}
